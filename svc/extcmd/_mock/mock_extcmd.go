// Code generated by MockGen. DO NOT EDIT.
// Source: svc/extcmd/extcmd.go

// Package mock_extcmd is a generated GoMock package.
package mock_extcmd

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExternalCmdService is a mock of ExternalCmdService interface
type MockExternalCmdService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalCmdServiceMockRecorder
}

// MockExternalCmdServiceMockRecorder is the mock recorder for MockExternalCmdService
type MockExternalCmdServiceMockRecorder struct {
	mock *MockExternalCmdService
}

// NewMockExternalCmdService creates a new mock instance
func NewMockExternalCmdService(ctrl *gomock.Controller) *MockExternalCmdService {
	mock := &MockExternalCmdService{ctrl: ctrl}
	mock.recorder = &MockExternalCmdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExternalCmdService) EXPECT() *MockExternalCmdServiceMockRecorder {
	return m.recorder
}

// RunFfmpeg mocks base method
func (m *MockExternalCmdService) RunFfmpeg(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunFfmpeg", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunFfmpeg indicates an expected call of RunFfmpeg
func (mr *MockExternalCmdServiceMockRecorder) RunFfmpeg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunFfmpeg", reflect.TypeOf((*MockExternalCmdService)(nil).RunFfmpeg), arg0, arg1)
}
